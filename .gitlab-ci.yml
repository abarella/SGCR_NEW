# Pipeline de CI/CD para deploy autom√°tico no IIS
# Executa ap√≥s merge na branch main/master

stages:
  - build
  - deploy

variables:
  # Configura√ß√µes do projeto
  PROJECT_NAME: "sgcr_novo"
  IIS_SITE_NAME: "SGCR_NEW"
  IIS_APP_POOL: "SGCR_NEW"
  PHP_VERSION: "8.2"

# Cache para otimizar builds
cache:
  paths:
    - vendor/
    - node_modules/

# =============================
# JOB DE BUILD
# =============================
build:
  stage: build
  tags:
    - dev
    - iis
    - windows
  script:
    - echo "üöÄ Iniciando build da aplica√ß√£o..."
    - composer install --no-dev --optimize-autoloader
    # Usa o .env do servidor, ent√£o aqui n√£o criamos .env
    - php artisan config:clear
    - php artisan cache:clear
    - php artisan route:clear
    - php artisan view:clear
    - echo "‚úÖ Build conclu√≠da com sucesso!"
  artifacts:
    paths:
      - app/
      - bootstrap/
      - config/
      - database/
      - lang/
      - public/
      - resources/
      - routes/
      - storage/
      - artisan
    exclude:
      - "/node_modules"
      - "/.git"
      - "/tests"
      - "/*.log"
      - "/storage/logs"
      - "/storage/framework/cache"
      - ".env"             # Garante que nunca vai junto
      - ".env.example"
    expire_in: 1 hour
  only:
    - main
    - master
  except:
    - tags

# =============================
# JOB DE DEPLOY
# =============================
deploy:
  stage: deploy
  tags:
    - dev
    - iis
    - windows
  script:
    - echo "üöÄ Iniciando deploy no IIS..."
    # Configurar credenciais de rede usando vari√°veis do GitLab
    - |
      cmdkey /add:${DEPLOY_SERVER} /user:${DEPLOY_USERNAME} /pass:${DEPLOY_PASSWORD}
      Write-Host "Credenciais de rede configuradas"
    # Criar diret√≥rio de backup se n√£o existir
    - if (!(Test-Path "${BACKUP_DIR}")) { New-Item -ItemType Directory -Path "${BACKUP_DIR}" -Force }
    # Backup simples (sem .env)
    - |
      if (Test-Path "${DEPLOY_DIR}") {
        $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
        $backupPath = "${BACKUP_DIR}\\backup_${timestamp}"
        Write-Host "Criando backup em: $backupPath"
        New-Item -ItemType Directory -Path "$backupPath" -Force
        robocopy "${DEPLOY_DIR}" "$backupPath" /E /XD "vendor" "node_modules" "tests" ".git" /XF "*.log" ".env" ".env.example"
        Write-Host "Backup conclu√≠do com sucesso!"
      }
    # Deploy incremental (sem .env)
    - Write-Host "Copiando arquivos da aplica√ß√£o..."
    - |
      try {
        robocopy "${SOURCE_DIR}" "${DEPLOY_DIR}" /MIR /IS /IT /XD "node_modules" "tests" ".git" "vendor" "storage" "bootstrap/cache" /XF "*.log" ".env" ".env.example" /R:3 /W:10
        Write-Host "Robocopy aplica√ß√£o conclu√≠do (c√≥digo: $LASTEXITCODE)"
      } catch {
        Write-Host "Robocopy aplica√ß√£o conclu√≠do (com erro, mas continuando...)"
      }
    # Copiar depend√™ncias
    - Write-Host "Copiando depend√™ncias..."
    - |
      try {
        robocopy "${SOURCE_DIR}\\vendor" "${DEPLOY_DIR}\\vendor" /E /R:3 /W:10
        Write-Host "Robocopy vendor conclu√≠do (c√≥digo: $LASTEXITCODE)"
      } catch {
        Write-Host "Robocopy vendor conclu√≠do (com erro, mas continuando...)"
      }
    - Write-Host "‚úÖ Deploy conclu√≠do com sucesso!"
    # Limpar backups antigos
    - Write-Host "Limpando backups antigos..."
    - |
      $backups = Get-ChildItem "${BACKUP_DIR}" -Directory | Sort-Object CreationTime -Descending | Select-Object -Skip 5
      foreach ($backup in $backups) {
        Remove-Item $backup.FullName -Recurse -Force
        Write-Host "Backup removido: $($backup.Name)"
      }
  environment:
    name: development
    url: http://des-sgcr_novo.ipen.br
  only:
    - main
    - master
  except:
    - tags
  allow_failure:¬†false